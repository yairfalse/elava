# OpenTelemetry Collector Configuration - Production
# This config is optimized for production with security, reliability, and performance features

receivers:
  # OTLP receiver with TLS and authentication
  otlp:
    protocols:
      grpc:
        endpoint: 0.0.0.0:4317
        max_recv_msg_size_mib: 32
        max_concurrent_streams: 100
        # Uncomment for TLS:
        # tls:
        #   cert_file: /etc/otel/certs/server.crt
        #   key_file: /etc/otel/certs/server.key
        #   client_ca_file: /etc/otel/certs/ca.crt
        # auth:
        #   authenticator: bearertokenauth

      http:
        endpoint: 0.0.0.0:4318
        # Uncomment for TLS:
        # tls:
        #   cert_file: /etc/otel/certs/server.crt
        #   key_file: /etc/otel/certs/server.key

processors:
  # Memory limiter - critical for production stability
  memory_limiter:
    check_interval: 1s
    limit_mib: 2048
    spike_limit_mib: 512

  # Batch processor - optimized for throughput
  batch:
    timeout: 10s
    send_batch_size: 10000
    send_batch_max_size: 11000

  # Resource processor - adds production metadata
  resource:
    attributes:
      - key: service.name
        value: elava
        action: upsert
      - key: deployment.environment
        value: ${ENVIRONMENT}
        action: upsert
      - key: service.version
        value: ${SERVICE_VERSION}
        action: upsert
      - key: k8s.cluster.name
        value: ${K8S_CLUSTER_NAME}
        action: upsert
      - key: k8s.namespace.name
        value: ${K8S_NAMESPACE}
        action: upsert

  # Attributes processor - filter sensitive data
  attributes:
    actions:
      # Remove sensitive AWS data
      - key: aws.access_key
        action: delete
      - key: aws.secret_key
        action: delete
      - key: aws.session_token
        action: delete

      # Remove sensitive resource tags
      - key: resource.tags.secret
        action: delete
      - key: resource.tags.password
        action: delete
      - key: resource.tags.token
        action: delete

      # Redact email addresses
      - key: user.email
        pattern: '([a-zA-Z0-9._%-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,6})'
        action: hash

  # Resource detection - auto-detect cloud metadata
  resourcedetection:
    detectors: [env, system, docker, ec2, gcp, azure]
    timeout: 5s

  # Transform processor - enrich data
  transform:
    log_statements:
      - context: log
        statements:
          - set(severity_text, "CRITICAL") where severity_number >= 21
          - set(severity_text, "ERROR") where severity_number >= 17 and severity_number < 21
          - set(severity_text, "WARNING") where severity_number >= 13 and severity_number < 17
          - set(severity_text, "INFO") where severity_number >= 9 and severity_number < 13

exporters:
  # Prometheus exporter
  prometheus:
    endpoint: "0.0.0.0:8889"
    namespace: elava
    const_labels:
      environment: ${ENVIRONMENT}
    resource_to_telemetry_conversion:
      enabled: true

  # OTLP exporter to Jaeger with retry
  otlp/jaeger:
    endpoint: ${JAEGER_ENDPOINT}
    tls:
      insecure: false
      cert_file: /etc/otel/certs/client.crt
      key_file: /etc/otel/certs/client.key
    retry_on_failure:
      enabled: true
      initial_interval: 5s
      max_interval: 30s
      max_elapsed_time: 300s
    sending_queue:
      enabled: true
      num_consumers: 10
      queue_size: 5000

  # OTLP HTTP exporter to Loki with authentication
  otlphttp/loki:
    endpoint: ${LOKI_ENDPOINT}
    # Uncomment for authentication:
    # headers:
    #   Authorization: "Bearer ${LOKI_API_TOKEN}"
    tls:
      insecure: false
    retry_on_failure:
      enabled: true
      initial_interval: 5s
      max_interval: 30s
      max_elapsed_time: 300s
    sending_queue:
      enabled: true
      num_consumers: 10
      queue_size: 5000

  # Backup exporter - S3 for long-term storage
  # file:
  #   path: /var/log/otel/telemetry.json
  #   rotation:
  #     max_megabytes: 100
  #     max_days: 7
  #     max_backups: 10

extensions:
  # Health check
  health_check:
    endpoint: 0.0.0.0:13133
    path: /health

  # pprof for profiling (disable in production if not needed)
  pprof:
    endpoint: localhost:1777

  # Bearer token authentication (if needed)
  # bearertokenauth:
  #   filename: /etc/otel/auth/tokens.json

service:
  extensions: [health_check, pprof]

  pipelines:
    # Traces pipeline with full processing
    traces:
      receivers: [otlp]
      processors:
        - memory_limiter
        - resourcedetection
        - resource
        - attributes
        - batch
      exporters: [otlp/jaeger]

    # Metrics pipeline
    metrics:
      receivers: [otlp]
      processors:
        - memory_limiter
        - resourcedetection
        - resource
        - batch
      exporters: [prometheus]

    # Logs pipeline with transformation
    logs:
      receivers: [otlp]
      processors:
        - memory_limiter
        - resourcedetection
        - resource
        - attributes
        - transform
        - batch
      exporters: [otlphttp/loki]

  telemetry:
    logs:
      level: warn
      encoding: json
    metrics:
      level: normal
      address: 0.0.0.0:8888
